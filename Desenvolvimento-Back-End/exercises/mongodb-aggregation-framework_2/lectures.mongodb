db.clients.insertMany([
  { name: "Dave America", State: "Florida" },
  { name: "Ned Flanders", State: "Alasca" },
  { name: "Mark Zuck", State: "Texas" },
  { name: "Edna Krabappel", State: "Montana" },
  { name: "Arnold Schuz", State: "California" },
  { name: "Lisa Simpson", State: "Florida" },
  { name: "Barney Gumble", State: "Texas" },
  { name: "Homer Simpson", State: "Florida" },
]);

// Selecione todos os clientes com as suas respectivas transações feitas;
db.clients.aggregate([
  {
    $lookup: { 
      from: "transactions",
      localField: "name",
      foreignField: "from",
      as: "transactions_complet"
   }
  }
]);

//Selecione quatro clientes com as suas respectivas transações recebidas;
db.clients.aggregate([
  {
    $lookup: { 
      from: "transactions",
      localField: "name",
      foreignField: "to",
      as: "transactions_complet"
   }
  },
  { $limit: 4 }
]);

//Selecione todos os cliente do estado da "Florida" e suas respectivas transações recebidas.
db.clients.aggregate([
  { $match: { "State": "Florida" } },
  {
    $lookup: { 
      from: "transactions",
      localField: "name",
      foreignField: "to",
      as: "transactions_complet"
   }
  }
]);


db.products.insertMany([
  { "name": "Ball", "purchase_price": 7.6, "taxes": 1.9, "sale_price": 12.5, "quantity": 5 },
  { "name": "Baseball bat", "purchase_price": 18.5, "taxes": 5.3, "sale_price": 39.9, "quantity": 12 },
  { "name": "Sneakers", "purchase_price": 10.4, "taxes": 1.50, "sale_price": 14.9, "quantity": 3 },
  { "name": "Gloves", "purchase_price": 2.85, "taxes": 0.90, "sale_price": 5.70, "quantity": 34 },
  { "name": "Jacket", "purchase_price": 28.9, "taxes": 10.80, "sale_price": 59.9, "quantity": 20 },
  { "name": "Mousepad", "purchase_price": 16.6, "taxes": 3.40, "sale_price": 29.9, "quantity": 8 },
  { "name": "Monitor", "purchase_price": 119.9, "taxes": 39.20, "sale_price": 240.6, "quantity": 11 },
]);

// Calcule qual o custo total de cada produto, considerando o preço de compra e os impostos.
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      total: { $add: ["$purchase_price", "$taxes"] }
    }
  }
]);

// Calcule qual o lucro total de cada produto, considerando o preço de compra, os impostos e seu valor de venda.

db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      total: { $round: [
        {
          $subtract: [
            "$sale_price",
            { $add: ["$purchase_price", "$taxes"] },
          ]
        },
        2
      ] }
    }
  }
]);

// Retorne o menor número inteiro relativo ao preço de venda de cada produto;
db.products.aggregate([
  { $project: { _id: 0, name: 1, "sale_price": { $floor: "$sale_price" } } }
]);


// Retorne o maior número inteiro relativo ao lucro total sobre cada produto.
db.products.aggregate([
  { $project: { _id: 0, name: 1, "sale_price": { $ceil: {
    $subtract: ["$sale_price", { $add: ["$purchase_price", "$taxes"] }]
  } } } }
]);

//Calcule o valor absoluto do lucro total de cada produto.
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      "absolute": {
        $abs: {
          $subtract: ["$sale_price", { $add: ["$purchase_price", "$taxes"] }]
        }
      }
    }
  }
]);

// Calcule qual o valor total em estoque de cada produto, considerando o preço de venda e a quantidade;
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      "price": {
        $multiply: ["$quantity", "$sale_price"]
      }
    }
  }
]);

// Calcule qual será o lucro total de cada produto caso todo o estoque seja vendido.
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      "price": {
        $multiply: ["$quantity", {
          $subtract: ["$sale_price", { $add: ["$purchase_price", "$taxes"] }]
        } ]
      }
    }
  }
]);

// Calcule qual será o preço de venda de cada produto caso haja uma promoção de 50% de desconto.
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      "price": {
        $divide: ["$sale_price", 2]
      }
    }
  }
]);

// Calcule o valor total do estoque, considerando que cada produto valha o mesmo que seu preço de venda. Lembre-se da quantidade.

db.products.aggregate([
  {
    $addFields: {
      "total_do_estoque": { $multiply: ["$sale_price", "$quantity"] }
    }
  }
]);